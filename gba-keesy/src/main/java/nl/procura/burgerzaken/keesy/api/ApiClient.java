/*
 * Copyright 2024 - 2025 Procura B.V.
 *
 * In licentie gegeven krachtens de EUPL, versie 1.2
 * U mag dit werk niet gebruiken, behalve onder de voorwaarden van de licentie.
 * U kunt een kopie van de licentie vinden op:
 *
 *   https://github.com/vrijBRP/vrijBRP/blob/master/LICENSE.md
 *
 * Deze bevat zowel de Nederlandse als de Engelse tekst
 *
 * Tenzij dit op grond van toepasselijk recht vereist is of schriftelijk
 * is overeengekomen, wordt software krachtens deze licentie verspreid
 * "zoals deze is", ZONDER ENIGE GARANTIES OF VOORWAARDEN, noch expliciet
 * noch impliciet.
 * Zie de licentie voor de specifieke bepalingen voor toestemmingen en
 * beperkingen op grond van de licentie.
 */

/*
 * Signaleringcontroles API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package nl.procura.burgerzaken.keesy.api;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import lombok.AllArgsConstructor;
import lombok.Getter;

public abstract class ApiClient {

  private final ApiClientConfig config;

  public ApiClient(ApiClientConfig config) {
    this.config = config;
  }

  /**
   * Get the base URI to resolve the endpoint paths against.
   *
   * @return The complete base URI that the rest of the API parameters are resolved against.
   */
  public ApiClientConfig config() {
    return config;
  }

  public abstract <T, R> ApiResponse<R> get(Request<T> request, Class<R> type);

  public abstract <T, R> ApiResponse<R> post(Request<T> request, Class<R> type);

  @Getter
  public static class Request<T> {

    private final String              path;
    private final Map<String, String> headers;
    private final List<Parameter>     parameters;
    private T                         body;

    public Request(String path) {
      this.path = path;
      this.parameters = new ArrayList<>();
      this.headers = new HashMap<>();
      this.body = null;
    }

    public Request<T> parameter(String key, String value) {
      parameters.add(new Parameter(key, value));
      return this;
    }

    public Request<T> header(String key, String value) {
      headers.put(key, value);
      return this;
    }

    public Request<T> body(T body) {
      this.body = body;
      return this;
    }
  }

  @Getter
  @AllArgsConstructor
  public static class Parameter {

    public final String name;
    public final String value;
  }
}

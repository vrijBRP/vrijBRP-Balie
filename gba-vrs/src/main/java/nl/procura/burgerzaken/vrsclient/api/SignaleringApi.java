/*
 * Copyright 2024 - 2025 Procura B.V.
 *
 * In licentie gegeven krachtens de EUPL, versie 1.2
 * U mag dit werk niet gebruiken, behalve onder de voorwaarden van de licentie.
 * U kunt een kopie van de licentie vinden op:
 *
 *   https://github.com/vrijBRP/vrijBRP/blob/master/LICENSE.md
 *
 * Deze bevat zowel de Nederlandse als de Engelse tekst
 *
 * Tenzij dit op grond van toepasselijk recht vereist is of schriftelijk
 * is overeengekomen, wordt software krachtens deze licentie verspreid
 * "zoals deze is", ZONDER ENIGE GARANTIES OF VOORWAARDEN, noch expliciet
 * noch impliciet.
 * Zie de licentie voor de specifieke bepalingen voor toestemmingen en
 * beperkingen op grond van de licentie.
 */

/*
 * Signaleringcontroles API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package nl.procura.burgerzaken.vrsclient.api;

import java.time.ZoneId;
import java.time.format.DateTimeFormatter;
import nl.procura.burgerzaken.vrsclient.ApiClient;
import nl.procura.burgerzaken.vrsclient.ApiException;
import nl.procura.burgerzaken.vrsclient.model.SignaleringRequestV2Bsn;
import nl.procura.burgerzaken.vrsclient.model.SignaleringRequestV2Bsn.AanleidingEnum;
import nl.procura.burgerzaken.vrsclient.model.SignaleringRequestV2PersoonsGegevens;
import nl.procura.burgerzaken.vrsclient.model.SignaleringResponse;
import nl.procura.standard.ProcuraDate;

public class SignaleringApi extends AbstractVrsApi {

  private final ApiClient apiClient;

  public SignaleringApi(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  /**
   * Vind een persoon met signalering(en) op BSN nummer Het resultaat van deze aanroep is 1 persoon met signalering(en)
   * gevonden (HIT) of geen persoon met signalering(en) gevonden (NO_HIT)
   */
  public SignaleringResponse signaleringsRequest(VrsRequest vrsRequest) throws ApiException {
    if (vrsRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'vrsRequest' when calling signaleringsRequest");
    }

    ApiClient.Request<Object> apiRequest;
    if (vrsRequest.bsn() != null) {
      String localVarPath = "/signaleringcontroles/v2/bsn";
      apiRequest = new ApiClient.Request<>(localVarPath);
      apiRequest.body(getBsnRequest(vrsRequest));

    } else if (vrsRequest.geslachtsnaam() != null) {
      String localVarPath = "/signaleringcontroles/v2/persoonsgegevens";
      apiRequest = new ApiClient.Request<>(localVarPath);
      apiRequest.body(getPersoonsgegevensRequest(vrsRequest));
    } else {
      throw new ApiException(400, "Both vrsRequest.bsn and vrsRequest.geslachtnaam are missing");
    }

    setHeaders(vrsRequest.metadata(), apiRequest);
    return apiClient.post(apiRequest, SignaleringResponse.class);
  }

  private SignaleringRequestV2PersoonsGegevens getPersoonsgegevensRequest(VrsRequest vrsRequest) {
    SignaleringRequestV2PersoonsGegevens req = new SignaleringRequestV2PersoonsGegevens();
    req.setVoornamen(vrsRequest.voornamen());
    req.setVoorvoegselGeslachtsnaam(vrsRequest.voorvoegsel());
    req.setGeslachtsnaam(vrsRequest.geslachtsnaam());
    req.setGeboortedatum(toGeboorteDatum(vrsRequest.geboortedatum()));

    if (vrsRequest.aanvraagnummer() == null) {
      req.setAanleiding(SignaleringRequestV2PersoonsGegevens.AanleidingEnum.IDENTITEITSONDERZOEK);
    } else {
      req.setAanleiding(SignaleringRequestV2PersoonsGegevens.AanleidingEnum.REISDOCUMENTAANVRAAG);
      req.aanvraagnummer(vrsRequest.aanvraagnummer());
    }
    return req;
  }

  private SignaleringRequestV2Bsn getBsnRequest(VrsRequest vrsRequest) {
    SignaleringRequestV2Bsn req = new SignaleringRequestV2Bsn();
    req.setBsn(vrsRequest.bsn().getDefaultBsn());
    if (vrsRequest.aanvraagnummer() == null) {
      req.setAanleiding(AanleidingEnum.IDENTITEITSONDERZOEK);
    } else {
      req.setAanleiding(AanleidingEnum.REISDOCUMENTAANVRAAG);
      req.aanvraagnummer(vrsRequest.aanvraagnummer());
    }
    return req;
  }

  private String toGeboorteDatum(String geboortedatum) {
    return new ProcuraDate(geboortedatum)
        .getDateFormat()
        .toInstant().atZone(ZoneId.systemDefault())
        .toLocalDate()
        .format(DateTimeFormatter.ISO_LOCAL_DATE);
  }
}

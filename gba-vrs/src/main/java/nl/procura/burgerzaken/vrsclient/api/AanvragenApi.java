/*
 * Copyright 2024 - 2025 Procura B.V.
 *
 * In licentie gegeven krachtens de EUPL, versie 1.2
 * U mag dit werk niet gebruiken, behalve onder de voorwaarden van de licentie.
 * U kunt een kopie van de licentie vinden op:
 *
 *   https://github.com/vrijBRP/vrijBRP/blob/master/LICENSE.md
 *
 * Deze bevat zowel de Nederlandse als de Engelse tekst
 *
 * Tenzij dit op grond van toepasselijk recht vereist is of schriftelijk
 * is overeengekomen, wordt software krachtens deze licentie verspreid
 * "zoals deze is", ZONDER ENIGE GARANTIES OF VOORWAARDEN, noch expliciet
 * noch impliciet.
 * Zie de licentie voor de specifieke bepalingen voor toestemmingen en
 * beperkingen op grond van de licentie.
 */

/*
 * Signaleringcontroles API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package nl.procura.burgerzaken.vrsclient.api;

import static java.util.Objects.requireNonNull;
import static java.util.Optional.ofNullable;

import nl.procura.burgerzaken.vrsclient.ApiClient;
import nl.procura.burgerzaken.vrsclient.ApiException;
import nl.procura.burgerzaken.vrsclient.model.Aanvraaginformatie;
import nl.procura.burgerzaken.vrsclient.model.ControleAanvraagDetailResponse;
import nl.procura.burgerzaken.vrsclient.model.ControleAanvraagRequest;
import nl.procura.burgerzaken.vrsclient.model.ControleAanvraagVolledigResponse;
import nl.procura.burgerzaken.vrsclient.model.ControleAanvragenRequest;
import nl.procura.burgerzaken.vrsclient.model.ControleAanvragenResponse;
import nl.procura.validation.Bsn;

public class AanvragenApi extends AbstractVrsApi {

  private final ApiClient apiClient;

  public AanvragenApi(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  public VrsResponse<VrsRequest, ControleAanvragenResponse> aanvragen(VrsRequest vrsRequest) throws ApiException {
    String localVarPath = "/controleaanvragen/v2/personalisatiegegevens";
    ApiClient.Request<Object> apiRequest = new ApiClient.Request<>(localVarPath);
    apiRequest.body(toAanvragenRequest(vrsRequest));
    setHeaders(vrsRequest.metadata(), apiRequest);
    return new VrsResponse<VrsRequest, ControleAanvragenResponse>()
        .response(apiClient.post(apiRequest, ControleAanvragenResponse.class))
        .request(vrsRequest);
  }

  public VrsResponse<VrsRequest, ControleAanvraagDetailResponse> aanvraag(VrsRequest vrsRequest) throws ApiException {
    String localVarPath = "/controleaanvragen/v2/aanvraag";
    ApiClient.Request<Object> apiRequest = new ApiClient.Request<>(localVarPath);
    apiRequest.body(toAanvraagRequest(vrsRequest));
    setHeaders(vrsRequest.metadata(), apiRequest);
    return new VrsResponse<VrsRequest, ControleAanvraagDetailResponse>()
        .response(apiClient.post(apiRequest, ControleAanvraagDetailResponse.class))
        .request(vrsRequest);
  }

  public VrsResponse<VrsRequest, ControleAanvraagVolledigResponse> aanvraagDetails(VrsRequest vrsRequest)
      throws ApiException {
    String localVarPath = "/controleaanvragen/v2/aanvraag/details";
    ApiClient.Request<Object> apiRequest = new ApiClient.Request<>(localVarPath);
    apiRequest.body(toAanvraagRequest(vrsRequest));
    setHeaders(vrsRequest.metadata(), apiRequest);
    return new VrsResponse<VrsRequest, ControleAanvraagVolledigResponse>()
        .response(apiClient.post(apiRequest, ControleAanvraagVolledigResponse.class))
        .request(vrsRequest);
  }

  private ControleAanvragenRequest toAanvragenRequest(VrsRequest request) {
    requireNonNull(request.aanleiding(), "aanleiding is required");
    ControleAanvragenRequest req = new ControleAanvragenRequest();
    req.setAanleiding(ControleAanvragenRequest.AanleidingEnum.valueOf(request.aanleiding().name()));
    req.setGeslachtsnaam(request.geslachtsnaam());
    req.setVoornamen(request.voornamen());
    req.setGeboortedatum(request.geboortedatum());
    req.setGeboorteplaats(null);
    req.setVoorvoegselgeslachtsnaam(request.voorvoegsel());
    req.setBsn(ofNullable(request.bsn()).map(Bsn::getLongBsn).orElse(null));
    req.setAnummer(null);
    req.setAanvraagnummer(request.aanvraagnummer());
    return req;
  }

  private ControleAanvraagRequest toAanvraagRequest(VrsRequest request) {
    requireNonNull(request.aanleiding(), "aanleiding is required");
    ControleAanvraagRequest req = new ControleAanvraagRequest();
    req.setAanleiding(ControleAanvraagRequest.AanleidingEnum.valueOf(request.aanleiding().name()));
    req.setAanvraaginformatie(new Aanvraaginformatie().aanvraagnummer(request.aanvraagnummer()));
    req.setAanvraagnummer(request.aanvraagnummer());
    return req;
  }
}

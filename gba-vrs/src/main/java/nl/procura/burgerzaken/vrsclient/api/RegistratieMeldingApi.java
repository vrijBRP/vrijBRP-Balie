/*
 * Copyright 2024 - 2025 Procura B.V.
 *
 * In licentie gegeven krachtens de EUPL, versie 1.2
 * U mag dit werk niet gebruiken, behalve onder de voorwaarden van de licentie.
 * U kunt een kopie van de licentie vinden op:
 *
 *   https://github.com/vrijBRP/vrijBRP/blob/master/LICENSE.md
 *
 * Deze bevat zowel de Nederlandse als de Engelse tekst
 *
 * Tenzij dit op grond van toepasselijk recht vereist is of schriftelijk
 * is overeengekomen, wordt software krachtens deze licentie verspreid
 * "zoals deze is", ZONDER ENIGE GARANTIES OF VOORWAARDEN, noch expliciet
 * noch impliciet.
 * Zie de licentie voor de specifieke bepalingen voor toestemmingen en
 * beperkingen op grond van de licentie.
 */

/*
 * Signaleringcontroles API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package nl.procura.burgerzaken.vrsclient.api;

import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.time.ZoneId;
import nl.procura.burgerzaken.vrsclient.ApiClient;
import nl.procura.burgerzaken.vrsclient.ApiException;
import nl.procura.burgerzaken.vrsclient.model.RegistratieMeldingReisdocumentResponse;
import nl.procura.burgerzaken.vrsclient.model.RegistratieMeldingReisdocumentUitgevendeInstantiesRequest;
import nl.procura.standard.ProcuraDate;

public class RegistratieMeldingApi extends AbstractVrsApi {

  private final ApiClient apiClient;

  public RegistratieMeldingApi(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  public VrsResponse<VrsMeldingRequest, RegistratieMeldingReisdocumentResponse> meldingRequest(
      VrsMeldingRequest request)
      throws ApiException {
    if (request == null) {
      throw new ApiException(400, "Missing the required parameter 'request' when calling meldingReisdocumentRequest");
    }

    ApiClient.Request<Object> apiRequest;
    if (request.datumTijd() == null) {
      throw new ApiException(400, "DatumTijd is verplicht");
    }
    if (request.melding() == null) {
      throw new ApiException(400, "Meldingcode is verplicht");
    }
    if (request.reden() == null) {
      throw new ApiException(400, "Redencode is verplicht");
    }
    if (request.documentnummer() == null) {
      throw new ApiException(400, "Documentnummer is verplicht");
    }

    String localVarPath = "/registratiemeldingreisdocument/uitgevendeinstanties/v1";
    apiRequest = new ApiClient.Request<>(localVarPath);
    apiRequest.body(getRequest(request));
    setHeaders(request.metadata(), apiRequest);
    return new VrsResponse<VrsMeldingRequest, RegistratieMeldingReisdocumentResponse>()
        .response(apiClient.post(apiRequest, RegistratieMeldingReisdocumentResponse.class))
        .request(request);
  }

  private RegistratieMeldingReisdocumentUitgevendeInstantiesRequest getRequest(VrsMeldingRequest request) {
    return new RegistratieMeldingReisdocumentUitgevendeInstantiesRequest()
        .datummelding(toOffsetDate(request.datumTijd()))
        .documentnummer(request.documentnummer())
        .meldingcode(request.melding().getCode())
        .redencode(request.reden().getCode())
        .datumredenmelding(toLocalDate(request.datumReden()));
  }

  private OffsetDateTime toOffsetDate(ProcuraDate procuraDate) {
    return procuraDate
        .getDateFormat()
        .toInstant()
        .atZone(ZoneId.systemDefault())
        .toOffsetDateTime();
  }

  private LocalDate toLocalDate(ProcuraDate procuraDate) {
    return procuraDate
        .getDateFormat()
        .toInstant()
        .atZone(ZoneId.systemDefault())
        .toLocalDate();
  }
}

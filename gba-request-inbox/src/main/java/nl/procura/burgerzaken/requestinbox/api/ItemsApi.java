/*
 * Copyright 2024 - 2025 Procura B.V.
 *
 * In licentie gegeven krachtens de EUPL, versie 1.2
 * U mag dit werk niet gebruiken, behalve onder de voorwaarden van de licentie.
 * U kunt een kopie van de licentie vinden op:
 *
 *   https://github.com/vrijBRP/vrijBRP/blob/master/LICENSE.md
 *
 * Deze bevat zowel de Nederlandse als de Engelse tekst
 *
 * Tenzij dit op grond van toepasselijk recht vereist is of schriftelijk
 * is overeengekomen, wordt software krachtens deze licentie verspreid
 * "zoals deze is", ZONDER ENIGE GARANTIES OF VOORWAARDEN, noch expliciet
 * noch impliciet.
 * Zie de licentie voor de specifieke bepalingen voor toestemmingen en
 * beperkingen op grond van de licentie.
 */

/*
 * Signaleringcontroles API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package nl.procura.burgerzaken.requestinbox.api;

import static java.util.Optional.ofNullable;

import nl.procura.burgerzaken.requestinbox.api.model.InboxItem;

import lombok.Data;

public class ItemsApi {

  private final ApiClient apiClient;

  public ItemsApi(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  public ListItemsResponse listRequests(ListItemsRequest request, RequestConfig config) throws ApiException {
    ApiClient.Request<Object> apiRequest;
    String localVarPath = "/api/requests";
    apiRequest = new ApiClient.Request<>(localVarPath);
    request.statusses().forEach(val -> apiRequest.parameter("status[]", val.getId()));
    request.types().forEach(val -> apiRequest.parameter("type.name[]", val));
    request.customers().forEach(val -> apiRequest.parameter("customers.customer[]", val));
    request.requestHandlers().forEach(val -> apiRequest.parameter("requestHandler[]", val));
    request.preferredChannels().forEach(val -> apiRequest.parameter("preferredChannel[]", val));
    apiRequest.parameter("page", String.valueOf(request.page()));
    apiRequest.parameter("itemsPerPage", String.valueOf(request.itemsPerPage()));
    defaultHeaders(config, apiRequest);
    return apiClient.get(apiRequest, ListItemsResponse.class);
  }

  public InboxItem getItem(String id, RequestConfig config) {
    ApiClient.Request<Object> apiRequest;
    String localVarPath = "/api/requests/" + id;
    apiRequest = new ApiClient.Request<>(localVarPath);
    defaultHeaders(config, apiRequest);
    return apiClient.get(apiRequest, InboxItem.class);
  }

  public InboxItem patchRequest(String id, UpdateItemRequest request, RequestConfig config) throws ApiException {
    ApiClient.Request<Object> apiRequest;
    String localVarPath = "/api/requests/" + id;
    apiRequest = new ApiClient.Request<>(localVarPath);
    apiRequest.body(from(request));
    defaultHeaders(config, apiRequest);
    return apiClient.patch(apiRequest, InboxItem.class);
  }

  protected static void defaultHeaders(RequestConfig config, ApiClient.Request<Object> apiRequest) {
    apiRequest.header("Authorization", "Bearer " + config.accessToken());
    apiRequest.header("Accept", "application/ld+json");
  }

  private PatchRequestRequest from(UpdateItemRequest req) {
    PatchRequestRequest patchRequestRequest = new PatchRequestRequest();
    ofNullable(req.status()).ifPresent(val -> patchRequestRequest.setStatus(val.getId()));
    ofNullable(req.handlingChannel()).ifPresent(patchRequestRequest::setHandlingChannel);
    ofNullable(req.requestHandler()).ifPresent(patchRequestRequest::setRequestHandler);
    return patchRequestRequest;
  }

  @Data
  private static class PatchRequestRequest {

    private String status;
    private String requestHandler;
    private String handlingChannel;
  }
}
